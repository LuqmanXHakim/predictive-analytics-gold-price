# -*- coding: utf-8 -*-
"""predictive-analytics-gold-price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AMPvlW8pasD0GdjGI8pQlUT7EvsfXT7r

# **Proyek Machine Learning Terapan**

Proyek Predictive Analysis: **Gold Price**
- Nama: **Luqman Hakim**
- Email: luqmanxhakim22042002@gmail.com
- Id Dicoding:2608610

# Data Loading
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

from google.colab import files
files.upload()  # Pilih file 'kaggle.json' yang telah diunduh

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d altruistdelhite04/gold-price-data

!unzip gold-price-data.zip

df = pd.read_csv('/content/gld_price_data.csv')
df

"""# Exploratory Data Analysis (EDA)"""

#menampilan info lebih rinci pada dataframe
df.info()

#menampilkan jumlah baris dan kolom pada dataframe
df.shape

#menampilkan statistik deskriptif dari data frame
df.describe()

#visualisasi pairplot
sns.pairplot(df[['SPX','SLV','USO', 'GLD', 'EUR/USD']], plot_kws={"s": 5})

#ubah kolom 'Date' menjadi datetime dan ekstrak hari, bulan, tahun
df = (
    df
    .assign(Date=pd.to_datetime(df['Date']))
    .assign(
        Day=lambda x: x['Date'].dt.day,
        Month=lambda x: x['Date'].dt.month,
        Year=lambda x: x['Date'].dt.year
    )
    .drop(columns='Date')
    .loc[:, ['Day', 'Month', 'Year', 'SPX', 'GLD', 'USO', 'SLV', 'EUR/USD']]
)
df

#menghitung rata-rata GolD per tahun
years = df['Year'].unique()
average_prices = []

for year in sorted(years):
    mean_price = df[df['Year'] == year]['GLD'].mean()
    average_prices.append({'Year': year, 'GLD': mean_price})

average_prices_per_year = pd.DataFrame(average_prices)
average_prices_per_year

#menampilkan missing value
df.isna().sum()

#menampilkan duplikat data
df.duplicated().sum()

#menampilkan outliers
desc = df['GLD'].describe()
iqr = desc['75%'] - desc['25%']
lower_bound = desc['25%'] - 1.5 * iqr
upper_bound = desc['75%'] + 1.5 * iqr

outliers1 = df.query("GLD < @lower_bound")
outliers2 = df.query("GLD > @upper_bound")

print(outliers1)
print(outliers2)

#menangani outliers
median_value = df['GLD'].median()
df['GLD'] = df['GLD'].apply(
    lambda x: median_value if x < lower_bound or x > upper_bound else x
)

print(df)

"""# Modelling"""

y = df.loc[:, 'GLD']
X = df.drop(columns=y.name)
X = X.drop(['Day', 'Month', 'Year'], axis=1)

data_split = train_test_split(X, y, test_size=0.2, random_state=2)
X_train, X_test, y_train, y_test = data_split

scaler = MinMaxScaler()
X_train_scaled = scaler.fit(X_train).transform(X_train)
X_test_scaled = scaler.transform(X_test)

print(X_train_scaled[:5])
print(X_test_scaled[:5])

"""## Model Linear Regression"""

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, positive=False)

lin_reg.fit(X_train, y_train)

param_grid = {'copy_X': [True, False],
              'fit_intercept': [True, False],
              'n_jobs': [None],
              'positive': [True, False]}

grid_search = GridSearchCV(lin_reg,
                           param_grid,
                           cv=5,
                           scoring='neg_mean_squared_error')

grid_search.fit(X, y)

best_params = grid_search.best_params_
best_score = grid_search.best_score_

print("Parameter terbaik untuk model Linear Regression adalah:", best_params)
print("Skor Mean Squared Error (MSE) terbaik untuk model Regresi Linear adalah:", best_score)

"""## Model Random Forest"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

rf = RandomForestRegressor()

rf.fit(X_train, y_train)

param_grid = {
    'n_estimators': [50, 100],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5],
    'min_samples_leaf': [1, 2],
    'bootstrap': [True, False]
}

grid_search = GridSearchCV(rf,
                           param_grid,
                           cv=5,
                           scoring='neg_mean_squared_error')

grid_search.fit(X, y)

best_params = grid_search.best_params_
best_score = grid_search.best_score_

print("Parameter terbaik untuk model Random Forest Regressor adalah:", best_params)
print("Skor Mean Squared Error (MSE) terbaik untuk model Random Forest Regression adalah:", best_score)

"""# Evaluasi"""

rf_reg = RandomForestRegressor(random_state=42)
rf_reg.fit(X_train, y_train)

metrics = pd.DataFrame(index=['Linear Regression', 'Random Forest Regressor'])

models = {
    'Linear Regression': lin_reg,
    'Random Forest Regressor': rf_reg
}

for name, model in models.items():
    y_train_pred = model.predict(X_train)
    y_test_pred = model.predict(X_test)

    metrics.loc[name, 'MAE Train'] = round(mean_absolute_error(y_train, y_train_pred), 3)
    metrics.loc[name, 'MAE Test'] = round(mean_absolute_error(y_test, y_test_pred), 3)
    metrics.loc[name, 'MSE Train'] = round(mean_squared_error(y_train, y_train_pred), 3)
    metrics.loc[name, 'MSE Test'] = round(mean_squared_error(y_test, y_test_pred), 3)
    metrics.loc[name, 'R2 Train'] = round(r2_score(y_train, y_train_pred), 3)
    metrics.loc[name, 'R2 Test'] = round(r2_score(y_test, y_test_pred), 3)

display(metrics)

fig, axes = plt.subplots(2, 3, figsize=(18, 6))
colors = {'Linear Regression': 'blue', 'Random Forest Regressor': 'green'}

metrics_columns = ['MAE Train', 'MSE Train', 'R2 Train', 'MAE Test', 'MSE Test', 'R2 Test']
titles = ['MAE Train', 'MSE Train', 'R2 Train', 'MAE Test', 'MSE Test', 'R2 Test']

for i, ax in enumerate(axes.flatten()):
    ax.bar(metrics.index, metrics[metrics_columns[i]].values,
           color=[colors.get(name, 'gray') for name in metrics.index])
    ax.set_title(titles[i] + ' (Linear Regression vs Random Forest)')
    ax.set_ylabel(titles[i])

plt.tight_layout()
plt.show()

pred = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in models.items():
    pred_dict[name] = model.predict(pred).round(3)

pd.DataFrame(pred_dict)